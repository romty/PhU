# -*- coding: utf-8 -*-
"""Phase.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/13zkFiuzPUYbwT7J56hJtl_RYwQR4m99L
"""

from tensorflow.keras.utils import to_categorical ,Sequence
import scipy.io
import numpy as np
from sklearn import preprocessing
import cmath 
import model
from unwrap import unwrap
import data_generator as dg
from unwrap import unwrap
wrapped_image_dir = 'PU'


def make_pair(start, end):
    pairs = []
    for i in range(start, end):
        pairs.append([('wrap/wraped_' + str(i + 1) + '.mat'), ('unwrap/un_wraped_' + str(i + 1) + '.mat')])

    return pairs

from random import shuffle
train_pair = make_pair(0, 3000)
val_pair = make_pair(3000, 3750)

from random import sample, choice
temp = choice(train_pair)
print (temp[0], "GAB", temp[1])
tempx = choice(val_pair)
print (tempx[0], "GAB", tempx[1])

import matplotlib.pyplot as plt
img = scipy.io.loadmat(temp[0])['wrap']
mask_x= unwrap(img,wrap_around_axis_0=False, wrap_around_axis_1=False, wrap_around_axis_2=False)
plt.figure(figsize=(10,10))
plt.subplot(121)
plt.imshow(img, cmap='jet')
plt.subplot(122)
plt.imshow(mask_x, cmap='jet')
#plt.show()


import matplotlib.pyplot as plt
img = scipy.io.loadmat(tempx[0])['wrap']
mask_x= unwrap(img,wrap_around_axis_0=False, wrap_around_axis_1=False, wrap_around_axis_2=False)
plt.figure(figsize=(10,10))
plt.subplot(121)
plt.imshow(img, cmap='jet')
plt.subplot(    122)
plt.imshow(mask_x, cmap='jet')
#plt.show()

class_map=1
train_generator = dg.DataGenerator(train_pair,class_map,batch_size=20, dim=(256,256,1) ,shuffle=True)
train_steps = train_generator.__len__()
train_steps

val_generator = DataGenerator(val_pair, class_map, batch_size=20, dim=(256,256,1) ,shuffle=True)
val_steps = val_generator.__len__()
val_steps


if (__name__ == "__main__"):
    window_size=256
    n_CLASSES=1
    ##############################

    r2unet_model = model.r2_unet(window_size, window_size, n_CLASSES,data_format='channels_last')
    r2unet_model.summary()

    r2unet_model.fit_generator(train_generator , steps_per_epoch=train_steps ,epochs=20,validation_data=val_generator,validation_steps=val_steps)
    r2unet_model.save_weights('r2_unet_weights.h5')

    ##############################
    unet_model = model.unet(window_size, window_size, n_CLASSES,data_format='channels_last')
    unet_model.summary()

    unet_model.fit_generator(train_generator , steps_per_epoch=train_steps ,epochs=20,validation_data=val_generator,validation_steps=val_steps)
    unet_model.save_weights('unet_weights.h5')

    ##############################
    runet_model = model.r_unet(window_size, window_size, n_CLASSES,data_format='channels_last')
    runet_model.summary()

    runet_model.fit_generator(train_generator , steps_per_epoch=train_steps ,epochs=20,validation_data=val_generator,validation_steps=val_steps)
    runet_model.save_weights('r_unet_weights.h5')